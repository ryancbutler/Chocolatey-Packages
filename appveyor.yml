# AU template: https://github.com/majkinetor/au-packages-template

version: "{build}"
max_jobs: 1
# History plugin requires complete log
#clone_depth: 5
branches:
  only:
    - master
#build:
#  verbosity: minimal

environment:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version:
  au_push: true
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1

  # Github token to commit pushed packages to repository
  github_user_repo: "ryancbutler/Chocolatey-Packages"
  github_api_key:
    secure: DwoP2pyPXY5WqXA/XQc4mRVvi9WZXY/QUP5ycWBq7enxWMYebC2IeEvPNpHqYUEB #https://ci.appveyor.com/tools/encrypt

  # Mail credentials - for error notifications
  mail_user:
    secure: eCXvx2UOVMTROwTt0bGFUJBxQuJNZ86VMdW+5S1chNY= #https://ci.appveyor.com/tools/encrypt
  mail_pass:
    secure: Da+v06fO2AJ6xRIfujlysqw2d0fBHKkGJ6fJEcdnJSU= #https://ci.appveyor.com/tools/encrypt
  mail_server: smtp.gmail.com
  mail_port: 587
  mail_enablessl: true

  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: 7b5093c146bccff82f333d93e4a2e65a

  # Force test: gist id for test results
  gist_id_test:

  # Chocolatey API key - to push updated packages
  api_key:
    secure: lFSRiMajG2WhPc+yYNUo5TxHn4/mNh9bS0vlB1le0jC/TxlF6bo3+tj5DUjbbrQm # https://ci.appveyor.com/tools/encrypt

init:
  - git config --global user.email "ryan@ryancbutler.com"
  - git config --global user.name "RyanCButler"
  - git config --global core.safecrlf false

install:
  - ps: "Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version"
  - pwsh: $PSVersionTable
  - git --version
  - choco --version
  - pwsh: |
      git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
      . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

  - pwsh: |
      "Build info"
      '  {0,-20} {1}' -f 'SCHEDULED BUILD:', ($Env:APPVEYOR_SCHEDULED_BUILD -eq 'true')
      '  {0,-20} {1}' -f 'FORCED BUILD:'   , ($Env:APPVEYOR_FORCED_BUILD    -eq 'true')
      '  {0,-20} {1}' -f 'RE BUILD:'       , ($Env:APPVEYOR_RE_BUILD        -eq 'true')

# Uncomment the below line if you are using any of the functions from chocolatey-core.extension - https://chocolatey.org/packages/chocolatey-core.extension. Ensure you also have it listed in your package's dependencies
# - cinst chocolatey-core.extension

build_script:
  - pwsh: |
      $ErrorActionPreference = 'Continue'

      if ($Env:APPVEYOR_PROJECT_NAME  -like '*test*') { ./test_all.ps1 "random $Env:au_test_groups"; return }

      if ( ($Env:APPVEYOR_SCHEDULED_BUILD -ne 'true') -and ($Env:APPVEYOR_FORCED_BUILD -ne 'true') ) {
          switch -regex ($Env:APPVEYOR_REPO_COMMIT_MESSAGE)
          {
              '\[AU (.+?)\]'   { $forced = $Matches[1] }

              '\[PUSH (.+?)\]' {
                  $packages = $Matches[1] -split ' '
                  Write-Host "PUSHING PACKAGES: $packages"
                  foreach ($package in $packages) {
                      Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                      $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                      if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                      pushd $package_dir
                        if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                        choco pack; Push-Package;
                      popd
                  }
                  return
              }
          }
      }

      ./update_all.ps1 -ForcedPackages $forced
      7z a au_temp.zip $Env:TEMP\chocolatey\au\*

artifacts:
  - path: update_info.xml
  - path: Update-AUPackages.md
  - path: au_temp.zip

notifications:
  - provider: Email
    to: $(mail_user)
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
#on_finish:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
